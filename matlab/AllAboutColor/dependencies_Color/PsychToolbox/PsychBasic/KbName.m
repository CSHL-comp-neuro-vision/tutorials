function result = KbName(arg)% function result = KbName(arg)% 	% 	KbName maps between KbCheck-style keyscan codes and key names.% 	% 	¥	If arg is a string designating a key label then KbName returns the % 		keycode of the indicated key.  % 	¥	if arg is a keycode, KbName returns the label of the designated key. % 	¥	if no argument is supplied then KbName returns the key name of the % 		next keypress detected. KbName waits for one second before scanning% 		the keyboard for that keypress. This delay avoids catching the % 		<return> press used to execute the KbName function. % 			% 	KbName deals with keys, not characters. See KbCheck help for an % 	explanation of keys, characters, and keycodes.   % 	% 	There are standard character sets, but there are no standard key % 	names.  The convention KbName follows is to name keys with % 	the primary key label printed on the key.  For example, the the "]}" % 	key is named "]" because "]" is the primary key label and "}" is the % 	shifted key function.  In the case of  labels such as "5", which appears % 	on two keys, the name "5" designates the "5" key on the numeric keypad % 	and "5%" designates the QWERTY "5" key. Here, "5" specifies the primary % 	label of the key and the shifted label, "%" refines the specification, % 	distinguishing it from keypad "5".  Keys labeled with symbols not % 	represented in character sets are assigned names describing those symbols, % 	for example the space bar is named "space" and the apple key is% 	named "apple"% 	% 	Use KbName to make your scripts more readable and portable, using key % 	labels instead of keycodes, which are cryptic and may differ between Macs.  % 	For example, % 	% 	yesKey = KbName('return');           % 	[a,b,keyCode] = KbCheck;% 	if keyCode(yesKey)% 		flushevents('keyDown');% 		...% 	end;% 	% 	See also KbCheck, KbDemo, KbWait.% 	12/16/98  Allen Ingling wrote it% 	2/12/99  Denis Pelli cosmetic editing of comments% 	3/19/99  Denis Pelli added "enter" and "function" keys. Cope with hitting multiple keys.kk = cell(128,1);kk{1} = 'a';kk{2} = 's';kk{3} = 'd';kk{4} = 'f';kk{5} = 'h';kk{6} = 'g';kk{7} = 'z';kk{8} = 'x';kk{9} = 'c';kk{10} = 'v';kk{12} = 'b';kk{13} = 'q';kk{14} = 'w';kk{15} = 'e';kk{16} = 'r';kk{17} = 'y';kk{18} = 't';kk{19} = '1!';kk{20} = '2@';kk{21} = '3#';kk{22} = '4$';kk{23} = '6^';kk{24} = '5%';kk{25} = '=+';kk{26} = '9(';kk{27} = '7&';kk{28} = '-_';kk{29} = '8*';kk{30} = '0)';kk{31} = ']';kk{32} = 'o';kk{33} = 'u';kk{34} = '[';kk{35} = 'i';kk{36} = 'p';kk{37} = 'return';kk{38} = 'l';kk{39} = 'j';kk{40} = char(39);       % single quotekk{41} = 'k';kk{42} = ';';kk{43} = '\';kk{44} = ',';kk{45} = '/?';kk{46} = 'n';kk{47} = 'm';kk{48} = '.>';kk{49} = 'tab';kk{50} = 'space';kk{51} = '`';kk{52} = 'delete';kk{53} = 'enter';		% PowerBook G3 Serieskk{54} = 'esc';kk{56} = 'apple';kk{57} = 'shift';kk{58} = 'capslock';kk{59} = 'option';kk{60} = 'control';kk{64} = 'function';	% PowerBook G3 Serieskk{66} = '.';kk{68} = '*';kk{70} = '+';kk{72} = 'clear';kk{76} = '/';kk{77} = 'enter';kk{79} = '-';kk{82} = '=';kk{83} = '0';kk{84} = '1';kk{85} = '2';kk{86} = '3';kk{87} = '4';kk{88} = '5';kk{89} = '6';kk{90} = '7';kk{92} = '8';kk{93} = '9';kk{97} = 'f5';kk{98} = 'f6';kk{99} = 'f7';kk{100} = 'f3';kk{101} = 'f8';kk{102} = 'f9';kk{104} = 'f11';kk{106} = 'f13';kk{108} = 'f14';kk{110} = 'f10';kk{112} = 'f12';kk{114} = 'f15';kk{115} = 'help';kk{116} = 'home';kk{117} = 'pageup';kk{118} = 'del';kk{119} = 'f4';kk{120} = 'end';kk{121} = 'f2';kk{122} = 'pagedown';kk{123} = 'f1';kk{124} = 'left';kk{125} = 'right';kk{126} = 'down';kk{127} = 'up';unused = [11 55 61 62 63 65 67 69 71 73 74 75 ...			%unused codes			78 80 81 91 94 95 96 103 105 107 109 111 113 128];			used = setdiff(1:128,unused); %used codesclear resultif nargin==0	waitsecs(1);	keyPressed = 0;	while (~keyPressed)		[keyPressed, secs, keyCode] = KbCheck;	end %while	flushevents('keyDown');	result = kk{find(keyCode)};elseif isa(arg,'double')  %argument is a number, so find the code	% if more than one key is hit, we return an array	result = [kk{arg}];elseif ischar(arg)      %argument is a character, so find the code	for i = used		if strcmp(upper(kk{i}), upper(arg))			result = i;			break;		end %if	end %for iend %elseif		
function SCREEN% SCREEN is a MEX file to use on- and off-screen windows for display in% 	experiments. SCREEN has many functions; type "SCREEN" for a list:%		SCREEN% 	For explanation of any particular screen function, just add a question mark "?". % 	E.g. for 'OpenWindow', try either of these equivalent forms:% 		SCREEN('OpenWindow?')% 		SCREEN OpenWindow?% 	All the SCREEN Preference settings are documented together:% 		SCREEN Preference?% % 	Each on-screen window normally fills a monitor's whole screen.% 	Off-screen windows are invisible, but useful as an intermediate place to% 	create and store images for later display. Copying from window to% 	window is very fast, e.g. 36 MB/s on a PowerMac 7500/100. It's easy to% 	precompute a series of off-screen windows and then show them as a movie,% 	in real time, one per video frame.%% 	Command-period halts any program. (Type a period "." while holding the%	apple-cloverleaf key down.) If the command-period is intercepted by any of our% 	MEX files, all of SCREEN's windows will be closed, and the cursor will be shown,% 	to allow you to work normally in the MATLAB Command window.% 	% 	Command-zero brings the MATLAB Command window forward. (Type a zero "0" while% 	holding the apple-cloverleaf key down.)% 	% 	When you get a MATLAB error:% 	If your computer only has one screen (the typical scenario) and your program% 	produces a MATLAB error while your full-screen window is open, you'll hear the% 	beep, but you won't be able to see the MATLAB Command Window. Type% 	command-zero to bring the MATLAB Command window to the front, then type% 		clear screen% 	to flush just the SCREEN MEX file, or "clear mex" to flush all the MEX% 	files. When flushed, as part of its exit sequence, SCREEN closes all its% 	windows, restores the screen's normal color table, and shows the cursor.% 	Or you can get just those effects, without flushing, by calling% 		SCREEN('CloseAll')% 	You can use MATLAB's EVAL command to do this for you automatically. E.g. if% 	your program is called "foo.m", run your program by calling EVAL:% 		eval('foo','clear screen;error(''error in foo'')')% 	If an error occurs in FOO, MATLAB, instead of halting, will execute the second% 	argument to EVAL, which restores your screen and reports the error.% 	% 	windowPtr argument:% 	The SCREEN functions 'OpenWindow' and 'OpenOffscreenWindow' both return a% 	windowPtr, a number that designates the window you just created. You can% 	create many windows. And you can obtain a windowPtr to any of MATLAB's% 	windows. To use a window, you pass its windowPtr to the SCREEN function you% 	want to apply to that window.% 	% 	rect argument:% 	A rect is a 1x4 matrix containing the upper left and lower right coordinates% 	of an imaginary box containing all the pixels. Thus a rect [0 0 1 1] contains% 	just one pixel. All screen and window coordinates follow Apple Macintosh% 	conventions. (In Apple's the pixels occupy the space between the coordinates.)% 	Coordinates can be local to the window (i.e. 0,0 origin is at% 	upper left of window), or local to the screen (origin at upper left of% 	screen), or "global", which follows Apple's convention of treating the entire% 	desktop (all your screens) as one big screen, with origin at the upper left of% 	the main screen, which has the menu bar. You can rearrange the screens% 	in the desktop by using Apple's Control Panel: Monitors or Monitors and% 	Sounds. Historically we've had two different orderings of the elements of% 	rect, so, for general compatibility, all of the Psychophysics Toolbox refers% 	to the elements symbolically, through RectLeft, RectTop, etc. Since 2/97, we% 	use Apple's standard ordering: RectLeft=1, RectTop=2, RectRight=3,% 	RectBottom=4.% 	% 	[optional arguments]:% 	Brackets in the function list, e.g. [color], indicate optional arguments, not% 	matrices. Optional arguments must be in order, without omitting earlier ones,% 	but you can use the empty matrix [] as a place holder, with the same effect as% 	omitting it.% 	% 	Movies are easy:% 		% make movie% 		window=SCREEN(0,'OpenWindow',0);% 		rect=[0 0 200 200];% 		movie=1:100;% 		for i=1:100% 			movie(i)=SCREEN(window,'OpenOffscreenWindow',0,rect);% 			SCREEN(movie(i),'FillOval',255,[0 0 2 2]*(i-1));% 		end;% 		% show movie% 		for i=[1:100 100:-1:1] % forwards and backwards% 			SCREEN('CopyWindow',movie(i),window,rect,rect);% 			SCREEN(window,'WaitBlanking');% 		end;% 		SCREEN('CloseAll');%%	See also ScreenDemo, MovieDemo, ScreenTest.%% 	BUGS% 	All known bugs and fixs are described at the web site on the Bugs and Changes pages:% 	web http://color.psych.ucsb.edu/psychtoolbox/% 	% 	If you think you've found a bug, please tell us: % 	web mailto:psychtoolbox@psych.ucsb.edu% 	% 	It will help greatly if you can supply a  minimal-length program that exhibits % 	the bug. And please include a ScreenTest report, to document the context in% 	which you're running.
function err = SND(command,sig,rate)% err = SND(command,[sig],[rate])% % SND('Play',sig,[rate]) plays a sound on a Macintosh. Unlike MATLAB's% SOUND command, SND returns immediately, while the sound is still% playing. Calling SND('Play',sig) while a sound is already playing adds% the new sound to the queue. The "sound" and "rate" arguments are % explained below.% % SND('Open') opens the channel, which stays open until you call% SND('Close'). SND('Play',...) automatically opens the channel if it% isn't already open.% % SND('Close') immediately stops all sound and closes the channel. (This% happens automatically whenever SND.mex is flushed, e.g. by "CLEAR SND"% or "CLEAR MEX".)% % SND('Wait') waits until all the sounds in the channel play through.% % isPlaying=SND('IsPlaying') returns true (number of sounds in channel) if % any sound is playing, and false (0) otherwise. % % SND('Quiet') stops the sound currently playing and flushes the queue,% but leaves the channel open.% % "sound" may either be a numeric array of samples, or a string giving the% name of a Macintosh snd resource in the System file (or MATLAB% application or MEX file). (Use the Monitors & Sound control panel to see% what Alert Sounds are available.)% % Your "sound" data should lie between -1 and 1 (smaller to play more% softly). If the sound array has one row then it's played monaurally,% through both speakers. If it has two rows then it's played in stereo.% (SND has no provision for changing which speaker(s), or the volume,% used by a named snd resource, so use READSND to get the snd into an % array, and supply the appropriately modified array to SND.)% % The sample "rate" defaults to the standard Macintosh hardware sample rate% of 22254.545454 Hz. Other values can be specified (in the range 1000 to% 65535 Hz) but linear interpolation is used to resample the data.% Currently the "rate" is ignored when you specify the sound by name.%  % SND('Play',sin(0:10000)); % play 22 KHz/(2*pi)=3.5 kHz tone% SND('Play',[sin(1:20000) zeros(1,10000);zeros(1,10000) sin(1:20000)]); % stereo% SND('Play','Quack');      % play named snd resource% SND('Wait');         		% wait until end of all sounds currently in channel% SND('Quiet');        		% stop the sound and flush the queue% % At present, the channel's queue can hold up to 128 sounds (which could% easily be increased--let us know). If the queue is full when you call% SND('Play',sound), SND waits until there is room (i.e. the current sound% ends) and then adds its sound to the queue and returns. You can break% out of that wait by hitting Command-Period.% % SND is similar to the MATLAB SOUND command (and PlaySound.mex created by% Malcolm Slaney of Apple Computer) with two enhancements: immediate% (asynchronous) return and playing of named snd resources. SOUND and% SoundPlay operate synchronously, i.e. they return only after the sound% ends. SND uses the VideoToolbox SndPlay1.c routine to play sounds% asynchronously, i.e. return immediately, while the sound is still% playing. Asynchronous operation is important in many psychophysical% applications, because it allows you to play a sound during a dynamic% visual stimulus.% % For most of the commands, the returned value is zero when successful, % and a nonzero Apple error number when SND fails. The Apple error % number can be looked up, e.g. in Easy Errors, available from:% <http://hyperarchive.lcs.mit.edu/cgi-bin/NewSearch?key=Easy+Errors>% % SND('Play',sound) takes some time to open the channel, if it isn't% already open, and allocate a snd structure for your sound. This overhead% of the call to SND, if you call it in the middle of a movie, may be% perceptible as a pause in the movie, which would be bad. However, the% actual playing of the sound, asynchronously, is a background process% that usually has very little overhead. So, even if you want a sound to% begin after the movie starts, you should create a soundtrack for your% entire movie duration (possibly including long silences), and call SND% to set the sound going before you start your movie. (Thanks to Liz Ching% for raising the issue.)% % NOTE: When you specify a snd by name, you cannot specify a volume, but% there is an easy work around. As explained in the following paragraph,% use ResEdit and READSND to get the snd into an array. When you play% a snd from an array, you can control the volume by scaling the array.% (Thanks to Larry James for asking.)% % NOTE: SND allows you to specify only the name of the snd resource (e.g.% 'Quack'), not the file. MATLAB's READSND and WRITESND only allow you to% specify the filename, not the name of the resource. This is confusing% and inconvenient. One wishes for MEX files, perhaps "SndRead" and% "SndWrite", that would accept both the filename and the snd resource% name. However, the need isn't pressing; you can use ResEdit to copy snd% resources (e.g. from the System file) into individual files (one file% per snd), which you can access with MATLAB's READSND and WRITESND% commands. You can get ResEdit from Apple's web site:% web http://asu.info.apple.com/swupdates.nsf/artnum/n10964% (Thanks to Gary Marcus for asking.)% % SND.mex is an enhanced version of our now-obsolete SndPlay.mex, which% was based partly on PlaySound.c by Malcom Slaney, and partly on % VideoToolbox CreateTrialSounds.c. Most of the real work is done by% the VideoToolbox routine SndPlay1.c.% % PC Platform-%	% SND on a PC plays a sound with the signal vector 'snd' and the% sampling rate 'rate' using MATLAB's SOUND function. The main% difference between SND for the MAC and SNDPC is that the playsnd.dll% mex file is cleared before the sound is played. This will stop any% sound that is playing before this function is called. The rate% parameter is optional and if undefined, will default to 8192 Hz. To% make SND more compatible with the way SND works on the MAC, SND% waits an amount of time equal to how long the sound plays, so that% forthcoming calls to SND do not clip previous calls.% % See also PlayBeep, and MATLAB's READSND and WRITESND.% % Denis Pelli February 4,1998% 6/6/96	dgp Wrote SndPlay.% 6/1/97	dgp Polished help text.% 12/10/97	dhb Updated help.% 2/4/98	dgp Wrote SND, based on major update of VideoToolbox SndPlay1.c.% 3/8/00    emw Added PC notes and code.% 7/23/00   dgp Added notes about controlling volume of named snd, and updated%               broken link to ResEdit.if strcmp(computer,'PCWIN')   clear playsnd   if strcmp(command,'Play')      if nargin==2         sound(sig);         WaitSecs(length(sig)/8192);      elseif nargin==3         sound(sig,rate);         WaitSecs(length(sig)/rate);      else         error('Wrong number of arguments: see help SND.');      end   else      error([command ' not supported yet for the PC']);   endend
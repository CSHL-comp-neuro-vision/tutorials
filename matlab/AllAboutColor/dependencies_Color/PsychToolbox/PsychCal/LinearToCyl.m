function cyl = LinearToCyl(cal,linear)% cyl = LinearToCyl(cal,linear)%% Convert from cylindrical to linear coordinates.%% We use the conventions of the CIE Lxx color spaces% for angle.%% 10/17/93		dhb   Wrote it by converting CAP C code.% 2/20/94			jms   Added single argument case to avoid cDataif (nargin==1)  linear=cal;endcyl = linear;cyl(1,:) = linear(1,:);cyl(2,:) = sqrt( linear(2,:).^2 + linear(3,:).^2 );index = find( linear(2,:) == 0.0 & linear(3,:) == 0.0 );if (~isempty(index) )  cyl(3,index) = zeros(1,length(index)); endindex = find( linear(2,:) == 0.0 & linear(3,:) > 0.0 );if (~isempty(index) )  cyl(3,index) = pi/2*ones(1,length(index));  endindex = find( linear(2,:) == 0.0 & linear(3,:) < 0.0 );if (~isempty(index) )  cyl(3,index) = 3*pi/2*ones(1,length(index)); end    index = find( linear(2,:) > 0.0 & linear(3,:) > 0.0 );if (~isempty(index) )  cyl(3,index) = atan(linear(3,index) ./ linear(2,index) ); end    index = find( linear(2,:) > 0.0 & linear(3,:) < 0.0 );if (~isempty(index) )  cyl(3,index) = 2*pi*ones(1,length(index)) + ...                 atan(linear(3,index) ./ linear(2,index) ); endindex = find( linear(2,:) < 0.0 & linear(3,:) > 0.0 );   if (~isempty(index) )  cyl(3,index) = pi*ones(1,length(index)) + ...                 atan(linear(3,index) ./ linear(2,index) ); end   index = find( linear(2,:) < 0.0 & linear(3,:) < 0.0 );   if (~isempty(index) )  cyl(3,index) = pi*ones(1,length(index)) + ...                 atan(linear(3,index) ./ linear(2,index) ); end   
% CalibrateAmbDrvr%% This script does the work for monitor ambient calibration.%% Saves output in specified file.%% 4/4/94		dhb		Wrote it.% 8/5/94		dhb, ccc	More flexible interface.% 9/4/94		dhb		Small changes.%	10/20/94	dhb		Add bgColor variable.% 12/9/94   ccc   Nine-bit modification% 1/23/95		dhb		Pulled out working code to be called from elsewhere.%						dhb		Make user prompting optional.% 1/24/95		dhb		Get filename right.% 12/17/96  dhb, jmk  Remove big bug.  Ambient wasn't getting set.% 4/12/97   dhb   Update for new toolbox.% 8/21/97		dhb		Don't save files here.%									Always measure.% 4/7/99    dhb   NINEBIT -> NBITS%           dhb   Handle noMeterAvail, RADIUS switches.% 9/22/99   dhb, mdr  Make boxRect depend on boxSize, defined up one level.% 12/2/99   dhb   Put background on after white box for aiming.% Get user to do his thingif (USERPROMPT == 1)	disp('Make sure to turn room lights off!');	disp('Make sure to defeat screen saver!');	disp('The screen will present a box');	disp('Focus radiometer on the displayed square');	disp('then hit any key when you are ready to go');	disp(sprintf('You will get %g seconds after that to leave the room',leaveRoomTime));	disp('Hit any key to proceed past this message');	GetKey;end% Check meterif (~noMeterAvail)	CMCheckInit;end% Define device characteristicsbits = NBITS;nInputLevels = 2^bits;nMonDevices = 3;nMonBases = 1;% Get synchronization timingif (syncMode ~= 0)	freq = CMETER('Frequency');	if (freq ~= -1)		disp(sprintf('Using frequency of %g Hz',freq));	else		disp('Cannot sync, using DC mode');		syncMode = 0;	endend	% Blank the screenif (RADIUS)	[window,screenRect] = SCREEN(whichScreen,'OpenWindow',0,[],32);else	[window,screenRect] = SCREEN(whichScreen,'OpenWindow',0);endif (whichScreen == 0)	HideCursor;endif (RADIUS)	radiusGamma = (0:4:1020)'*ones(1,3);	SCREEN(window,'Gamma',radiusGamma,10);	SCREEN(window,'SetClut',(0:255)'*ones(1,3));endrClut2 = 0:1:255;clut2 = [rClut2', rClut2', rClut2'];SCREEN(window,'SetClut',clut2);% Draw a box in the center of the screenboxRect = [0 0 boxSize boxSize];boxRect = CenterRect(boxRect,screenRect);SCREEN(window,'FillRect',1,boxRect);if (RADIUS)	radiusGamma(1,:) = [nInputLevels-1 nInputLevels-1 nInputLevels-1];	SCREEN(window,'WaitBlanking');	SCREEN(window,'Gamma',radiusGamma,10);else	SetColor(window,1,[nInputLevels-1 nInputLevels-1 nInputLevels-1]',bits);end% Wait for userif (USERPROMPT == 1)	GetKey;	WaitTicks(60*leaveRoomTime);end% Put in appropriate background.if (RADIUS)	radiusGamma(1,:) = cal.bgColor';	SCREEN(window,'WaitBlanking');	SCREEN(window,'Gamma',radiusGamma,10);else  SetColor(window,0,cal.bgColor,bits);end% Start timingt0 = clock;ambient = zeros(S(3),1);for a = 1:nAverage  % Measure ambient	ambient = MeasMonSpd(window,[0 0 0]',S,0,bits,noMeterAvail,RADIUS);endambient = ambient / nAverage;% Close the screenSCREEN(window,'Close');if (whichScreen == 0)	ShowCursor;end% Report timet1 = clock;disp(sprintf('CalibrateAmbDrvr measurements took %g minutes',etime(t1,t0)/60));         
function XYZ = MeasMonXYZ(window,settings,syncMode,bits,noMeterAvail,RADIUS)% XYZ = MeasMonXYZ(window,settings,[syncMode],[bits],[noMeterAvail],[RADIUS])%% Measure the XYZ of a series of monitor settings.%% This routine is specific to go with CalibrateMon,% as it depends on the action of SetMon. %% If noMeterAvail is passed and set to 1, then the routine% returns random spectra.  This is useful for testing when% you don't have a meter.%% 10/26/93  dhb  	Wrote it based on ccc code.% 11/12/93  dhb  	Modified to use SetColor.%	6/23/94		ccc		Modified it from MeasMonSpd.m for%									the purpose of measuring XYZ%	8/9/94		dhb		Added code to go into sync mode%									And then commented it out.% 8/11/94		dhb		Sync mode back in% 8/15/94		dhb		Sync mode as argument.% 4/12/97   dhb   New toolbox compatibility, take window and bits args.% 8/26/97		dhb, pbe Add noMeterAvail option.% 4/7/99    dhb   Add argument for radius board.  Compact default arg code.% Check args and make sure window is passed right.usageStr = 'Usage: XYZ = MeasMonXYZ(window,settings,[syncMode],[bits])';if (nargin < 2 | nargin > 6 | nargout > 1)	error(usageStr);endif (size(window,1) ~= 1 | size(window,2) ~= 1)	error(usageStr);end% Set defaultsdefaultSync = 0;defaultBits = 8;defaultNoMeterAvail = 0;% Check args and set defaultsif (nargin < 6 | isempty(RADIUS))	RADIUS = 0;endif (nargin < 5 | isempty(noMeterAvail))	noMeterAvail = defaultNoMeterAvail;endif (nargin < 4 | isempty(bits))	bits = defaultBits;endif (nargin < 3 | isempty(syncMode))	syncMode = defaultSync;end% Radius default gammaif (RADIUS)	radiusGamma = SCREEN(window,'Gamma');end[null,nMeas] = size(settings);XYZ = zeros(3,nMeas);for i=1:nMeas  if (RADIUS)		radiusGamma(2,:) = settings(:,i)';		SCREEN(window,'WaitBlanking');		SCREEN(window,'Gamma',radiusGamma,10);	else  	SetColor(window,1,settings(:,i),bits);	end			% Set parameters for monitor measurements	if (~noMeterAvail)		if (syncMode ~= 0)			CMETER('SetParams',1,0,1);		else			CMETER('SetParams',0,0,1);		end	end		% Make the measurement	if (~noMeterAvail)  	XYZ(:,i) = MeasXYZ;	else		XYZ(:,i) = sum(settings(:,i)*ones(3,1);		WaitSecs(0.1);	endend
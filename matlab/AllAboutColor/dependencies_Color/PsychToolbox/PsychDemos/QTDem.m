function QTDem% QTDem demonstrates the use of QT.mex to create and display a QuickTime movie.% % The odd spelling of "QTDem" avoids conflict with the Mathworks% "qtdemo.m" Quad Tree decomposition demo in the Image Processing% Toolbox.% % The code in the first section below, to compute a grating, and display it% in a window using SCREEN 'PutImage', works perfectly at all pixelSizes.% At present, the QT.mex conversion of the same MATLAB array to a QuickTime movie% seems to work correctly only if "bits" (ie specified pixelSize for the movie)% is 8. (16 and 32 might be ok too.) I expect to fix that soon. % However, once you've saved the QuickTime movie,% you can display it at any depth, i.e. you can set your screen's pixelSize to% anything you want and QuickTime will do an excellent job of rendering the movie% appropriately.% % Denis Pelli, 11/99% % dgp 11/7/99 Wrote it, based on Beau Watson's Mathematica qtWrite tutorial.% dgp 11/9/99 Put movie in root directory.% dgp 11/13/99 Put movie on desktop. Restrict to 8, 16, or 32 bit pixelSize.% dgp 11/15/99 Add QT 'OpenWindow' and 'CloseWindow'.clear qt;% windowwhichScreen=0;window=QT('OpenWindow',whichScreen);%window=SCREEN(whichScreen,'OpenWindow');white=GrayIndex(window,1);black=GrayIndex(window,0);gray=GrayIndex(window,0.5);if round(gray)==white	gray=black;endinc=white-gray;SCREEN(window,'FillRect',gray);% gratingframes=90;[x,y]=meshgrid(-50:50,-50:50);angle=17*pi/180; % arbitrary 17 deg orientationf=0.03*2*pi;a=cos(angle)*f;b=sin(angle)*f;rate=FrameRate(window);hz=2;grating=uint8(zeros(size(x))); % uint8 takes up 1/8 the space as doublegrating(:,:,frames)=grating;for i=1:frames 	m=exp(-((x/25).^2)-((y/25).^2)).*sin(a*x+b*y+2*pi*(i/rate)*hz);	t=8*(i-(frames+1)/2)/frames;	grating(:,:,i)=gray+inc*m*exp(-t^2);	SCREEN(window,'PutImage',grating(:,:,i));end% Save the QuickTime movie file in the user's desktop.s=matlabroot;n=findstr(filesep,s);root=s(1:n(1));cd(fullfile(root,'Desktop Folder',''));filename='DriftingGrating.mov';% Make the movie, and save it to disk as a QuickTime movie file.rows=size(grating,1);cols=size(grating,2);trackTimescale=600;frameDuration=round(trackTimescale/FrameRate(whichScreen)); preload=1;movie=QT('MovieCreate',filename,window);QT('VideoTrackCreate',movie,rows,cols,trackTimescale,preload);QT('VideoMediaCreate',movie);bits=SCREEN(window,'PixelSize');if bits<8;	bits=8;endQT('VideoMediaSamplesAdd',movie,grating,bits,frameDuration);QT('VideoMediaSave',movie);QT('VideoTrackSamplesSet',movie);QT('VideoTrackSave',movie);%QT('MovieUserDataAdd',movie,'A movie demo.','©inf');QT('MovieSave',movie);fprintf('Your new %d-bit QuickTime movie "%s" is on your desktop.\n',bits,filename);QT('CloseWindow',window);% SCREEN(window,'Close');% show the moviemovie=QT('GetFromFile',filename);desc=QT('GetImageDescription',movie); % get various useful facts about our movielist=QT('GetCodecNameList');QT('LoadIntoRam',movie);window=QT('OpenWindow',whichScreen);QT('Window',movie,window);%SCREEN(window,'FillRect',gray);%QT('Scale',movie,2);QT('Show',movie);% for i=1:frames% 	QT('MovieFrameDisplay',movie,i)% endQT('Dispose',movie);QT('CloseWindow',window);
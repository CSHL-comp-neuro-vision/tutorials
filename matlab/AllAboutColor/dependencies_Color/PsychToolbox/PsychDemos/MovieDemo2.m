% MovieDemo2%% Demonstrates how to show a movie at the frame rate of the monitor. This% is a more elaborate example than MovieDemo. % See also MovieDemo, ScreenTest.% 1/21/98  dhb  This started as a program written by Geoff Loftus.% 1/22/98  dhb  Cleaned it up for didactic purposes.% 1/22/98  dgp	Call COMPUTER and MAXPRIORITYGETSECS to enhance compatibility.% 2/1/98	 dgp	MaxPriority. Renamed "priority" to "priorityLevel" to avoid%								conflict with Priority function.% 3/12/98	dgp   Use Ask.% 3/25/98	dgp   Delete illegal x argument in call to Ask.% 7/17/98	dgp   Using enhanced Rush, use easy-to-read cell array for string.% 7/21/98	dgp   Make sure all Rushed functions are in memory.% ParametersnRows = 320;nCols = 240;[c,maxElements]=computer;	% for compatibility with Student MATLABif nRows*nCols>maxElements	nCols=floor(sqrt(maxElements)/4)*4;	nRows=floor(maxElements/nCols);endnFrames = 75;whichScreen = 0;priorityLevel = MaxPriority(whichScreen,'GetSecs','WaitBlanking','PeekBlanking');% Preload GetSecsGetSecs;% Make images and clutsoffClut = zeros(256,3);onClut = (0:255)'*[1 1 1];image1 = 255*((MakeCosImage(2,0,nRows,nCols)+1)/2);image2 = 255*((MakeCosImage(0,2,nRows,nCols)+1)/2);% Open screen.  Do this before opening the% offscreen windows so you can align offscreen% window memory to onscreen for faster copying.[window,windowRect] = Screen(whichScreen,'OpenWindow',0,[],8);SCREEN(window,'SetClut',onClut);imageRect = SetRect(0,0,nCols,nRows);destRect = CenterRect(imageRect,windowRect);% Put images into offscreen memory.  When we open an offscreen% window we specify which on-screen window it should be% aligned with, for fast copying.ow1=SCREEN(window,'OpenOffscreenWindow',0,imageRect,8);SCREEN(ow1,'PutImage',image1,imageRect);ow2=SCREEN(window,'OpenOffscreenWindow',0,imageRect,8);SCREEN(ow2,'PutImage',image2,imageRect);% Set up string for Rush.  You can make this as long as you like.% The first call to WaitBlanking synchronizes the timing with the frame% rate.  But since GetSecs itself takes time, we put in a second% call to synchronize the actual write more accurately.  The timing% calculation takes account of the dummy frame.missed1 = zeros(nFrames,1);missed2 = zeros(nFrames,1);loop={	'SCREEN(window,''WaitBlanking'');'	'startTime = GetSecs;'	'SCREEN(window,''WaitBlanking'');'	'for i = 1:nFrames;'		'SCREEN(''CopyWindow'', ow1, window,imageRect,destRect);'		'missed1(i) = SCREEN(window,''WaitBlanking'');'		'SCREEN(''CopyWindow'', ow2, window,imageRect,destRect);'		'missed2(i) = SCREEN(window,''WaitBlanking'');'	'end;'	'finishTime = GetSecs;'};% Wait for clickSCREEN(window,'TextFont','Helvetica');SCREEN(window,'TextSize',18);ShowCursor(0);	% arrow cursorAsk(window,'Click mouse to show movie',255,0);% Show the movie. The Rushed code does the timing.HideCursor;SCREEN('Screens');GetSecs; % Make sure all Rushed functions are in memory.Rush(loop,priorityLevel);ShowCursor;% Close upSCREEN('CloseAll');% Print results.  The calculation assumes that no frame were missed.% This could be handled by first figuring out the frame rate and then% adjusting the time, rather than adjusting the effective number of% frames.fprintf('Movie size is %g by %g\n',nRows,nCols);fprintf('Showed %g on/off frames (plus 1 dummy frame) in %.3f seconds.\n%.1f image copies/sec\n',...	nFrames,(finishTime-startTime),((2*nFrames)+1)/(finishTime-startTime));fprintf('Missed %g frames during movie.  This should be 0 if movie\n',MatMax([missed1 missed2]));fprintf('is keeping up with the frame rate.  The image copies/sec calculation\n');fprintf('is accurate only if no frames are missed.  Run ScreenTest to determine\n');fprintf('how large a movie you can show at the frame rate.\n');
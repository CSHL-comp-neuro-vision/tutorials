function [spectrum,qual] = MeasSpd(S,meterType)% [spectrum,qual] = MeasSpd([S],[meterType])%% This routine splines the raw return values from the% meter to the wavelength sampling S.  The splining% handles conversion of power units according to % to the wavelength sampling delta.  If S is not passed,% it is set to [380 5 81].%% Tries to handle low light level case gracefully by returning% zero as the answer. %% meterType == 0:  PR650 (default)% meterType == 1:  Colortron%%	9/3/93		dhb		Added default handling of S.%	9/14/93		jms		Added global no hardware switch%	10/1/93		dhb		Removed print on error, passed qual on up%	10/4/93		dhb		Handle quality code 18 properly.%	1/16/94		jms		Removed 'exist' check and declared globals.%	2/20/94		dhb		Modified for CMETER.%	8/11/94		dhb		Handle sync mode error condition.%	9/7/94		dhb		Remove sync mode message.% 11/6/96   dhb   Remove extra call to CMETER('Measure').% 6/17/98   dhb   Add meterType switch.% 7/1/98    dhb, jmk Fix bug in switch.% 10/4/99   dhb, mdr Take return of -1 (timeout) to mean no light.%           dhb, mdr Remove gHardware and gHardwareMsg globals.% 4/4/00    dhb, jdt Pass S to PC version.% Handle defaultsif (nargin < 2 | isempty(meterType))  meterType = 0;endif (nargin < 1 | isempty(S))  S = [380 5 81];end switch (meterType)	% PR-650  case 0,		% Windows version.  Make it work the same as the Mac version.		if strcmp(computer,'PCWIN')			[spectrum, qual] = cmetermeasspd(S);						% Mac version		else			% Initial measurement			qual = CMETER('Measure');						% Check for sync mode error condition.  If we are in			% sync mode, try DC. 			if (qual == 7 | qual == 8)				%disp('Cannot sync, measuring in DC mode');				CMETER('SetParams',0,0,1);				qual = CMETER('Measure');			end						% Check for other error conditions			if (qual == -1 | qual == 10)			  %disp('Low light level during measurement');			  %disp('Setting returned value to zero');			  spectrum = zeros(S(3),1);			elseif (qual == 18)			  tmp = CMETER('Spectrum');			  spectrum = SplineSPD(tmp(:,1),tmp(:,2),S);			elseif (qual ~= 0)			  error(sprintf('Bad return code %g from meter',qual));			else			  tmp = CMETER('Spectrum');			  spectrum = SplineSPD(tmp(:,1),tmp(:,2),S);		  end		end	% Colortron	case 1,		CTRON('Init');		rawSpectrum = CTRON('Measure');		CTRON('Close');		S_CTRON = [390 10 32];		spectrum = SplineSpd(S_CTRON,rawSpectrum,S);		index = find(spectrum < 0);		if (~isempty(index))			spectrum(index) = 0;		end		qual = 0;		% Unknown meter	otherwise,		error('Unknown meter type');end	
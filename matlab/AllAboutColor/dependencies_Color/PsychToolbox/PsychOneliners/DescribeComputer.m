function DescribeComputer% DescribeComputer prints out several lines of text about the % environment that your programs are running in.%% NOTE: this is used by ScreenTest.m.%% Denis Pelli% 8/1/98 dgp Print PsychToolboxDate.% 4/12/99 dgp Suggest calling SCREEN('Preference','Backgrounding',0)% 12/23/99 dgp Report whether screen saver is present.% 12/23/99 dgp Report if VM is on.% 1/24/00 dgp Updated for enhanced ScreenSaver.mex.% 1/26/00 dgp Updated for SCREEN Preference Available.% 1/29/00 dgp Suggest upgrading to Mac OS 8.6 or better, to get UpTime.% 1/30/00 dgp Omit stuff that's no longer interesting: fpu,cache,pci.% 2/6/00 dgp Updated to use new struct return arg from SCREEN Computer.% 3/14/00 dgp Test for serial port arbitration.% 6/17/00 dgp Test for mirroring.% ****** Denis Pelli's PowerBook G3 Series/250, Mac OS 9.0.4 ******comp=SCREEN('Computer');fprintf('\n');fprintf('****** %s''s %s, %s',comp.owner,comp.model,comp.system);if length(comp.vm)>0	fprintf(', %s',comp.vm);endfprintf(' ******\n');% G3, 250 MHz, memory bus 83 MHz, 34.871 Mflop/sfprintf('%s',comp.processor);if isfinite(comp.hz) & comp.hz>0	% The processor and bus Hz information is only available (from Gestalt) on PCI Macs.	fprintf(', %.0f MHz%s, memory bus %.0f MHz',comp.hz/1e6,comp.emulating,comp.busHz/1e6);else	fprintf('%s',comp.emulating);endfprintf(', %.3f Mflop/s\n',FlopPerSec/1e6);% PsychToolbox 2.42, 7 March 2000, MATLAB 5.2.1.1421fprintf('PsychToolbox %g, %s, MATLAB %s\n',PsychToolboxVersion,PsychToolboxDate,version);% QuickTime 4.1.2q=AppleVersion('qtim');if length(q)>0	fprintf('QuickTime %s\n',AppleVersion('qtim'));else	fprintf('No QuickTime.\n');end% FileSharing is on.if FileShare>-3	fprintf('FileSharing is on.\n');end% Warning: VM is on. This makes it unsafe to raise priority to minimize interrupts.% SUGGESTION: Use Memory control panel to turn off Virtual Memory.g=gestalt('vm  ');if length(g)==32 & any(g)	fprintf('Warning: VM is on. This makes it unsafe to raise priority to minimize interrupts.\n');	fprintf('SUGGESTION: Use Memory control panel to turn off Virtual Memory.\n');end% Screen saver present, now disabled.ScreenSaver(1,1);[a,b]=ScreenSaver(0,0);if a|b	fprintf('Screen saver present, now disabled.\n');else	fprintf('No screen saver.\n');end% Using UpTime-based timing, which is very accurate and reliable.available=SCREEN('Preference','Available');if available.UpTime	fprintf('Using UpTime-based timing, which is very accurate and reliable.\n');else	fprintf('Using interrupt-based timing, because UpTime is not available.\n');	fprintf('SUGGESTION: upgrading to Mac OS 8.6 or better will make your\n');	fprintf('timing more accurate and immune from interrupts.\n');end% Has serial port arbitration.if strncmp(version,'5.2.1',5) % the old (pre 5.2.1) GESTALT terminates if selector is unknown	b=gestalt('arb ');	if length(b)==32 & b(32)		fprintf('Has serial port arbitration.\n');	else		fprintf('No serial port arbitration.\n');	endend% SUGGESTION: disable MATLAB's Backgrounding if you want maximum speed.% The easiest way is to call SCREEN('Preference','Backgrounding',0);if SCREEN('Preference','Backgrounding')	fprintf('SUGGESTION: disable MATLAB''s Backgrounding if you want maximum speed.\n');	fprintf('The easiest way is to call SCREEN(''Preference'',''Backgrounding'',0);\n');end% WARNING! Your displays overlap ("mirroring" each other), making CopyBits very slow.if SCREEN('Preference','MirroringIsOn')	fprintf('WARNING! Your displays overlap ("mirroring" each other), making CopyBits very slow.\n');end% Keyspan Digital Remote Media mapper daemon is running, slowing everything down by 30% or so.proc=SCREEN('preference','process','KEYj');if ~isempty(proc)	fprintf('Keyspan Digital Remote Media mapper daemon is running, slowing \n everything down by 30%% or so.\n');endreturnfunction r=FlopPerSec	% r=FlopPerSec	% Measure flop/s for FFT2. The ops increase as n*n*log(n). We first do n=8.	% If the machine is fast (i.e. not using SoftwareFPU) then we do n=32, which	% yields ratings similar to what we'd get for doing n=256, a typical	% image width.	r=fps(8);	if r>10000		% use bigger matrix if machine is fast		r=fps(32);	endreturnfunction r=fps(n)	f=flops;t=getsecs;fft2(1);	% load functions into memory	x=magic(n);	for i=1 % precompile		f=flops;		t=getsecs;		fft2(x);		t=getsecs-t;		f=flops-f;	end	r=f/t;return
% FindDiscriminantBruteSim%%	Find mean discriminant (difference in mean of two response clusters)%	for simulated data of responses in collection of cells.%%	Created 4/20/00 FMR%function [Discriminant, weight] = FindDiscriminantBruteSim(ResponseA, ResponseB, RFRadius, ShuffledList, Power)NumIterations = length(ShuffledList);		% number of trialsSegLength = size(ResponseA, 3);				% number of points in each trialRodMatrixSize = size(ResponseA, 1);			% number of rods in poolDistanceToRFCenter = 0;						% temp variable for calculating receptive field weightingDiscriminant(1:SegLength) = 0;				% storage space for discriminantrespA(1:SegLength) = 0;						% storage space for first pooled responserespB(1:SegLength) = 0;						% storage space for second pooled responserespA = respA';	respB = respB';RFWeightMatrix(1:RodMatrixSize, 1:RodMatrixSize) = 0;	% matrix with receptive field weightings for each rod% calculate receptive field weightings for each rodfor XLoc = 1:RodMatrixSize	for YLoc = 1:RodMatrixSize		DistanceToRFCenter = (XLoc - RodMatrixSize/2).^2 + (YLoc - RodMatrixSize/2).^2;		RFWeightMatrix(XLoc, YLoc) = exp(-DistanceToRFCenter / (2 * RFRadius.^2));	endend% generate mean of each response group and update discriminantfor cnt = 1:NumIterations	respA = 0;	respB = 0;	for XLoc = 1:RodMatrixSize		for YLoc = 1:RodMatrixSize			temp(1:SegLength) = ResponseA(XLoc, YLoc, 1:SegLength, ShuffledList(cnt));			respA = respA + RFWeightMatrix(XLoc, YLoc) * (temp.^Power)';			temp(1:SegLength) = ResponseB(XLoc, YLoc, 1:SegLength, ShuffledList(cnt));			respB = respB + RFWeightMatrix(XLoc, YLoc) * (temp.^Power)';		end	end	Discriminant = Discriminant + respA' - respB';end
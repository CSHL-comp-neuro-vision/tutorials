% function SimulateRodArrayResponse%%	Simulate response of rod array to flash delivered at specified% 	time and of specified strength.  Rod responses are described by% 	a single time constant, the amplitude of their single photon % 	response, the continuous noise amplitude, the thermal rate, %	and the channel noise amplitude.  See GenerateRodCurrent for details%	of the response simulation.%%	Created 4/25/00 FMRfunction RodResponse = SimulateRodArrayResponse(MatrixDimension, NumIterations, MeanPhos, Length, FlashTime)%PhotonTimes(1:Length) = 0;		% vector containing photon arrival timesTimeConstant = 10;				% time constant of rod responseImpulseResponseAmp = 3;			% amplitude of rod single photon responseContinuousNoiseAmp = 1;			% standard deviation of continuous noiseChannelNoiseAmp = 0.00001;		% standard deviation of channel noiseThermalProb = 0.00015;			% probability per time step of generating thermal eventRodResponse(1:MatrixDimension, 1:MatrixDimension, 1:Length, 1:NumIterations) = 0;		% buffer to store collection of simulated rod array responses%RodCurrent(1:Length) = 0;% generate impulse responses for photon-evoked events and continuous noise% eventsTime = 1:Length;ContinuousNoiseFilter = (Time/TimeConstant) .* exp(-Time/TimeConstant);ImpulseResponse = ImpulseResponseAmp .* (Time/TimeConstant).^3 .* exp(-Time/TimeConstant);ContinuousNoiseFilter = fft(ContinuousNoiseFilter);ImpulseResponse = fft(ImpulseResponse);% for each iteration generate simulate responses of entire rod poolfor iteration = 1:NumIterations	% choose number of photon hits per rod	PhotonHits = poissrnd(MeanPhos, MatrixDimension, MatrixDimension);	% do each rod in pool	for xcnt = 1:MatrixDimension		% generate noise		ThermalsMatrix = poissrnd(ThermalProb, Length, MatrixDimension);		ChannelNoiseMatrix = normrnd(0, ChannelNoiseAmp, Length, MatrixDimension);		ContinuousNoiseMatrix = normrnd(0, ContinuousNoiseAmp, Length, MatrixDimension);		ThermalsMatrix(FlashTime, :) = ThermalsMatrix(FlashTime, :) + PhotonHits(xcnt, :);		ThermalsMatrix = fft(ThermalsMatrix);		ContinuousNoiseMatrix = fft(ContinuousNoiseMatrix);		for ycnt = 1:MatrixDimension			% convolve impulse responses with stream of photon events and stream			% of continuous noise events.  Add channel noise.  Do this for each rod in array.			PhotonTimes = real(ifft(ImpulseResponse .* ThermalsMatrix(:,ycnt)'));			ContinuousNoise = real(ifft(ContinuousNoiseFilter .* ContinuousNoiseMatrix(:, ycnt)'));			RodResponse(xcnt, ycnt, 1:Length, iteration) = PhotonTimes + ContinuousNoise + ChannelNoiseMatrix(:, ycnt)';		end	endend
function PCorrect = MakePooledResponse(fitcoef, ProbHit, Power, RodMatrixSize, RFRadius, NumIterations)PCorrect = 0;DistanceToRFCenter = 0;RFWeightMatrix(1:RodMatrixSize, 1:RodMatrixSize) = 0;for XLoc = 1:RodMatrixSize	for YLoc = 1:RodMatrixSize		DistanceToRFCenter = (XLoc - RodMatrixSize/2).^2 + (YLoc - RodMatrixSize/2).^2;		RFWeightMatrix(XLoc, YLoc) = exp(-DistanceToRFCenter / (2 * RFRadius.^2));	endendfor iter = 1:NumIterations	RodResponseA = normrnd(0, abs(fitcoef(3)), RodMatrixSize, RodMatrixSize);	NumHits = POISSRND(ProbHit * RodMatrixSize^2);	XLoc = unidrnd(RodMatrixSize, NumHits, 1);	YLoc = unidrnd(RodMatrixSize, NumHits, 1);	for PhotonHit = 1:NumHits		RodResponseA(XLoc(PhotonHit), YLoc(PhotonHit)) = RodResponseA(XLoc(PhotonHit), YLoc(PhotonHit)) + normrnd(fitcoef(5), abs(fitcoef(4)));	end	RodResponseA = RodResponseA.^Power;	RodResponseA = RodResponseA .* RFWeightMatrix;	RodResponseB = normrnd(0, abs(fitcoef(3)), RodMatrixSize, RodMatrixSize);	RodResponseB = RodResponseB.^Power;	RodResponseB = RodResponseB .* RFWeightMatrix;	PooledResponseA = sum(sum(RodResponseA));	PooledResponseB = sum(sum(RodResponseB));		if (PooledResponseA > PooledResponseB)		PCorrect = PCorrect + 1;	end	if (PooledResponseA == PooledResponseB)		PCorrect = PCorrect + 0.5;	end	if (rem(iter, 50) == 0)		fprintf(1, '\t%d (%d): Probability Correct = %d\n', iter, NumHits, PCorrect/iter);	endendPCorrect = PCorrect / iter;mesh(RFWeightMatrix);fprintf(1, 'RF factor = %d\n', sum(sum(RFWeightMatrix)) / sqrt(sum(sum(RFWeightMatrix.^2))));
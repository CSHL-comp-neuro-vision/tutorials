function [NoiseProjs, SinglesProjs] = GenerateCombResponses(SinglesSD, NoiseSD, SinglesMean, NoiseMean, FlashStrength, NumRods, NumTrials, ThermalDist, ThermalRate, Verbose)% Generate No FlashResponsesNoiseProjs = normrnd(NoiseMean, NoiseSD, NumRods, NumTrials);% Generate Flash trialsPhotonTracker = poissrnd(FlashStrength, NumRods, NumTrials);%SortedPhotons = sortrows(PhotonTracker);for rod = 1:NumRods    SortedPhotons = sort(PhotonTracker(rod,:));	UniquePhotonCounts = unique(SortedPhotons);	NumUnique = length(UniquePhotonCounts);	for photonindex = 1:NumUnique		RespSD = sqrt(NoiseSD^2 + ((UniquePhotonCounts(photonindex) * SinglesSD)^2));		NumResps = length(find(SortedPhotons == UniquePhotonCounts(photonindex)));		TempResps = normrnd(UniquePhotonCounts(photonindex) * SinglesMean, RespSD, 1, NumResps);		if photonindex == 1			ResponseKeeper = TempResps;		else			ResponseKeeper = [ResponseKeeper, TempResps];		end	end    RandIndex = randperm(NumTrials);    SinglesProjs(rod,:) = ResponseKeeper(RandIndex);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Make thermals%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Thermal_flash = poissrnd(ThermalRate, NumRods, NumTrials);Thermal_noflash = poissrnd(ThermalRate, NumRods, NumTrials);%Get indexes for the thermals[FlashThermal_row, FlashThermal_col] = find(Thermal_flash > 0);[NoFlashThermal_row, NoFlashThermal_col] = find(Thermal_noflash > 0);% compute the number of thermals to know sample numberNumThermals_flash = length(FlashThermal_row);NumThermals_noflash = length(NoFlashThermal_row);StartBins = -2;BinSize = 0.01;EndBins = 4;TempBins = StartBins:BinSize:EndBins;if Verbose    hist(ThermalDist,TempBins)    title('Distribution of thermal projections')    pauseendHistThermals = hist(ThermalDist, TempBins);NonZeros = find(HistThermals ~= 0);if Verbose    plot(HistThermals(NonZeros))    title('Simplified thermal projections distribution')    pauseendTempSinglesHist= normpdf(TempBins, 0, SinglesSD);if Verbose     plot(TempBins,TempSinglesHist)    title('Variability in the single photon response')    pauseendConvolvedDists = conv(TempSinglesHist, HistThermals(NonZeros));if Verbose    plot(TempBins, ConvolvedDists(1:length(TempBins)))    title('Convolved singles variability and thermal projections')    pauseendThermalDist = ConvolvedDists(1:length(TempBins));ThermalDist = ThermalDist ./sum(ThermalDist);CumSumTargetDist = cumsum(ThermalDist);SampledDist = 0 * ThermalDist;% sample from uniform distributionNumSamples = NumThermals_flash + NumThermals_noflash;InitialSamples = unifrnd(0, 1, NumSamples, 1);% look up position of sample in cumulative sumif NumSamples > 0	for Sample = 1:NumSamples		pnt = 1;		while (InitialSamples(Sample) > CumSumTargetDist(pnt))			pnt = pnt + 1;		end				SampledDist(pnt) = SampledDist(pnt) + 1;        SampledThermals(Sample) = (BinSize * pnt) + StartBins;	end	if Verbose        hist(SampledThermals, TempBins)        title('Thermals')        pause	end		Thermals_flash = SampledThermals(1:NumThermals_flash);	Thermals_noflash = SampledThermals(NumThermals_flash+1:NumThermals_flash + NumThermals_noflash);		for epoch = 1:NumThermals_flash        SinglesProjs(FlashThermal_row(epoch), FlashThermal_col(epoch)) = SinglesProjs(FlashThermal_row(epoch), FlashThermal_col(epoch)) + Thermals_flash(epoch);	end	for epoch = 1:NumThermals_noflash        NoiseProjs(NoFlashThermal_row(epoch), NoFlashThermal_col(epoch)) = NoiseProjs(NoFlashThermal_row(epoch), NoFlashThermal_col(epoch)) + Thermals_noflash(epoch);	endend
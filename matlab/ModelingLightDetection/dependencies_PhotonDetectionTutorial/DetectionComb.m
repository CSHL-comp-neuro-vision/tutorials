load CompleteConcatSinglesload CompletePCASinglesConditionA = CompleteConcatSingles(1).SinglesConditionA;NoiseCondition = CompleteConcatSingles(1).NoiseCondition;Discriminant = SinglesConditionA.AverageResponse ./ dot(SinglesConditionA.AverageResponse, SinglesConditionA.AverageResponse);AData = SinglesConditionA.EpochData.Data;NoiseData = NoiseCondition.EpochData.Data;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Subtract the MeanTotalData = [AData; NoiseData];MeanTotalData = mean(TotalData);NumA = length(AData(:,1));NumNoise = length(NoiseData(:,1));AData = AData - repmat(MeanTotalData, NumA, 1);NoiseData = NoiseData - repmat(MeanTotalData, NumNoise, 1);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%AProjs = AData * Discriminant';NoiseProjs = NoiseData * Discriminant';TotalProjs = [AProjs; NoiseProjs];NumBins = 100;[junkhist, Bins] = hist(TotalProjs, NumBins);AHist = hist(AProjs, Bins);NoiseHist = hist(NoiseProjs, Bins);plot(Bins, AHist, 'r', Bins, NoiseHist, 'k') % Fit noise with a normal%[EstNoiseMean, EstNoiseSigma, MuCI, SigCI] = normfit(NoiseProjs, 0.5);coef = [0.5];global NumResponsesNumResponses = length(NoiseProjs);NoiseCoef = nlinfit(Bins', NoiseHist', 'ZeroMeanGaussian', coef)NoiseFit = ZeroMeanGaussian(NoiseCoef, Bins);NoiseSD = NoiseCoef;% fit the singles distributions%[EstAMean, EstASigma, MuCIA, SigCIA] = normfit(AProjs, 0.5);NumResponses = length(AProjs);global NoiseSDNoiseSD = abs(NoiseCoef);coef = [0.2,1]';SinglesCoef = nlinfit(Bins', AHist', 'SinglesDist', coef)SinglesFit = SinglesDist(SinglesCoef, Bins);SinglesMean = SinglesCoef(2);SinglesSD = SinglesCoef(1);% Plot Distributionsplot(Bins, AHist, 'r', Bins, NoiseHist, 'k') hold onplot(Bins, NoiseFit, 'b', Bins, SinglesFit, 'g')hold off%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Thermals:  checks the thermal simulation procedureThermalDist = CalcThermalDist(SinglesConditionA.AverageResponse);StartBins = -2;BinSize = 0.01;EndBins = 4;TempBins = StartBins:BinSize:EndBins;hist(ThermalDist,TempBins)HistThermals = hist(ThermalDist, TempBins);NonZeros = find(HistThermals ~= 0);plot(HistThermals(NonZeros))TempSinglesHist= normpdf(TempBins, 0, SinglesSD);plot(TempBins,TempSinglesHist)ConvolvedDists = conv(TempSinglesHist, HistThermals(NonZeros));plot(TempBins, ConvolvedDists(1:length(TempBins)))ThermalDist = ConvolvedDists(1:length(TempBins));ThermalDist = ThermalDist ./sum(ThermalDist);CumSumTargetDist = cumsum(ThermalDist);SampledDist = 0 * ThermalDist;% sample from uniform distributionNumSamples = 10000;InitialSamples = unifrnd(0, 1, NumSamples, 1);% look up position of sample in cumulative sumfor Sample = 1:NumSamples	pnt = 1;	while (InitialSamples(Sample) > CumSumTargetDist(pnt))		pnt = pnt + 1;	end		SampledDist(pnt) = SampledDist(pnt) + 1;    SampledThermals(Sample) = (BinSize * pnt) + StartBins;endhist(SampledThermals,TempBins)SampledDist = SampledDist / NumSamples;plot(SampledDist);hold onplot(ThermalDist, 'r');hold off;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ThermalDist = CalcThermalDist(SinglesConditionA.AverageResponse);% Generate Responses using the Comb fitsFlashStrength = 0.05;NumTrials = 500;NumRods = 1000;ThermalRate = 0.006;  % Expressed as per rod per trial (trial is 2 sec long)Verbose = 0;[SimNoise, SimSingles] = GenerateCombResponses(SinglesSD, NoiseSD, SinglesMean, 0, FlashStrength, NumRods, NumTrials, ThermalDist, ThermalRate, Verbose); %NumBins = 50;%[RespHist, CatBins] = hist(SimSingles(1,:), NumBins);%[NoiseHist] = hist(SimNoise(1,:), CatBins);%plot(CatBins, RespHist, 'k', CatBins, NoiseHist, 'r')% Discriminate responses optimally given the probability distributions for% the flash and no-flash trialsVerbose = 0;NumPhotons = 6;OptPCorrect = OptimalCombDiscrim(SimSingles, SimNoise, SinglesMean, SinglesSD, 0, NoiseSD, FlashStrength, NumPhotons, Verbose)% Discrimination by linearly pooling the responses prior to weighting each% by the log likelihoodVerbose = 0;NumPhotons = 6;LinPCorrect = LinearCombDiscrim(SimSingles, SimNoise, SinglesMean, SinglesSD, 0, NoiseSD, FlashStrength, NumPhotons, Verbose)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Simulate PCorrect as a function of flash strength and RF size%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%FlashStrengths = [0.0001 0.0003 0.0007 0.001 0.003 0.007 0.01 0.03 0.07 0.1];NumFlashes = length(FlashStrengths);RFSizes = [0.5 1 3 5 7 10] * 1000;NumRFs = length(RFSizes);NumTrials = 50;Verbose = 0;ThermalRate = 0.000;NumPhotons = 10;for RF = 1:NumRFs    fprintf('processing receptive field: rod number =  %d \n' ,RFSizes(RF))    for flash = 1:NumFlashes        fprintf('processing flash %d photons per rod \n', FlashStrengths(flash))        [SimNoise, SimSingles] = GenerateCombResponses(SinglesSD, NoiseSD, SinglesMean, 0, FlashStrengths(flash), RFSizes(RF), NumTrials, ThermalDist, ThermalRate, Verbose);         TempOpt = OptimalCombDiscrim(SimSingles, SimNoise, SinglesMean, SinglesSD, 0, NoiseSD, FlashStrengths(flash), NumPhotons, Verbose);        TempLin = LinearCombDiscrim(SimSingles, SimNoise, SinglesMean, SinglesSD, 0, NoiseSD, FlashStrengths(flash), NumPhotons, Verbose);                OptPCorrect(RF,flash) = TempOpt;        LinPCorrect(RF, flash) = TempLin;    end    OptPCorrect(RF,:)    LinPCorrect(RF,:)        coef = 0.7/ RFSizes(RF);    fitcoef = nlinfit(FlashStrengths', OptPCorrect(RF,:)', 'cumulative_gaussian', coef);    OptThreshold(RF) = norminv(0.75,0,fitcoef);   	figure(1)    semilogx(FlashStrengths, OptPCorrect(RF,:), 'ko', FlashStrengths, normcdf(FlashStrengths, 0, OptThreshold(RF)))    drawnow        coef = 3/RFSizes(RF);    fitcoef = nlinfit(FlashStrengths', LinPCorrect(RF,:)', 'cumulative_gaussian', coef);    LinThreshold(RF) = norminv(0.75, 0, fitcoef);      	figure(2)    semilogx(FlashStrengths, LinPCorrect(RF,:), 'ko', FlashStrengths, normcdf(FlashStrengths, 0, LinThreshold(RF)))	drawnowend        semilogy(RFSizes(1:5), OptThreshold(1:5),'k', RFSizes(1:5), LinThreshold(1:5), 'r')OptDetector = -log(0.5) ./ RFSizeshold onsemilogy(RFSizes, OptDetector)hold off
function PCorrect = LinearCombDiscrim(FlashProjs, NoFlashProjs, SinglesMean, SinglesSD, NoiseMean, NoiseSD, FlashStrength, NumPhotons, Verbose)%%  function PCorrect = LinearCombDiscrim(FlashProjs, NoFlashProjs, SinglesMean, SinglesSD, NoiseMean, NoiseSD, FlashStrength, NumPhotons, Verbose)%%   OptimalCombDiscrim uses a maximum likelihood approach to discriminat%   pooled rod responses to flash/no flash trials.%%   Created:  GDF:  06/11/04 -- modified from OptimalCombDiscrim%%[NumRods, NumTrials] = size(FlashProjs);% Check that you can assume rods are only getting < 1 photoisomerization;MultiphotonProb = 1 - poisscdf(NumPhotons, FlashStrength);if MultiphotonProb > 0.02    fprintf('\n WARNING: you are not summing to high enough flash strengths; increase NumPhotons input! \n')endfor trial = 1:NumTrials%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  flash trials%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     FlashedRF = sum(FlashProjs(:,trial));    CombProb = 0;    for photon = 0:NumPhotons		TempMean = (NumRods * poisspdf(photon, FlashStrength)) * (NoiseMean + (photon * SinglesMean));		TempSD = sqrt(NoiseSD^2 + (photon * SinglesSD^2)) * sqrt(NumRods * poisspdf(photon, FlashStrength));         CombProb = CombProb + (normpdf(FlashedRF, TempMean, TempSD) .* poisspdf(photon, FlashStrength));    end    FlashDist_flash = CombProb;    % Calculate the probability that its from the no flash distribution    NoFlashDist_flash = normpdf(FlashedRF, NoiseMean, NoiseSD * sqrt(NumRods));    if NoFlashDist_flash < 10^-200       TempLikelihood = 1;    else        TempLikelihood = sum(log10(FlashDist_flash./NoFlashDist_flash));    end    FlashedLikelihood(trial) = TempLikelihood;   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  no flash trials%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	NoFlashRF = sum(NoFlashProjs(:,trial));    % Calculate the probabilitiy that the no flash responses are from the    % flash distribution    CombProb = 0;    for photon = 0:NumPhotons		TempMean = (NumRods * poisspdf(photon, FlashStrength)) * (NoiseMean + (photon * SinglesMean));		TempSD = sqrt(NoiseSD^2 + (photon * SinglesSD^2)) * sqrt(NumRods * poisspdf(photon, FlashStrength));         CombProb = CombProb + (normpdf(NoFlashRF, TempMean, TempSD) .* poisspdf(photon, FlashStrength));    end    FlashDist_noflash = CombProb;    % Calculte the probability that the no flash responses are from the no    % flash distribution    NoFlashDist_noflash = normpdf(NoFlashRF, NoiseMean, NoiseSD * sqrt(NumRods));    %pause           % Calculate the log likelihood ratio for the `no-flash' receptive fields   % for each trial   if NoFlashDist_noflash < 10^-200       TempLikelihood = 1;   else      TempLikelihood = sum(log10(FlashDist_noflash./NoFlashDist_noflash));  end  NoFlashedLikelihood(trial) = TempLikelihood;endNumCorrectA = length(find(FlashedLikelihood > 0));NumCorrectB = length(find(NoFlashedLikelihood < 0));ChanceCorrect = length(find(FlashedLikelihood == 0));ChanceCorrect = ChanceCorrect + length(find(NoFlashedLikelihood == 0));ZeroChecker = isempty(ChanceCorrect);if ZeroChecker == 0    AChanceCorrect = floor(ChanceCorrect / 4);    BChanceCorrect = ceil(ChanceCorrect / 4);endPCorrectA = NumCorrectA ./ NumTrials;PCorrectB = NumCorrectB ./ NumTrials;PCorrect = (PCorrectA + PCorrectB) / 2;    
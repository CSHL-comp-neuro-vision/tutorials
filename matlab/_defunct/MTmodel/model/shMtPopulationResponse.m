% [populationResponse, vx, vy] = shMtPopulationResponse(stimulus, pars, yVelocities, xVelocities)
%
% Compute the response of a large population of MT neurons to a stimulus.
%
% Required arguments:
% stimulus          a 3D matrix that contains a stimulus. Its dimensions
%                   must be [Y X T].
% pars              a parameters structure like the default parameter
%                   structure generated by shPars.
% yVelocities       the preferred y-velocities of the MT neurons in the
%                   large population.
% xVelocities       the preferred x-velocities of the MT neurons in the
%                   large population.
%
% Output:
% populationResponse    a matrix containing the average response of each
%                       neuron in the large population to the stimulus.
% vx                    a grid of the preferred x velocities in the population
% vx                    a grid of the preferred y velocities in the population
%
%
%
% Example of use:
% pars = shPars;
% dims = shGetDims(pars, 'mtPattern', [1 1 101]);
% stimulus = mkDots(dims, 0, 1);
% vels = linspace(-3, 3, 15);
% [populationResponse, vx, vy] = shMtPopulationResponse(stimulus, pars, vels, vels);
% shShowMtPopulationResponse(populationResponse, vx, vy);


function [populationResponse, vx, vy] = shMtPopulationResponse(stimulus, pars, yVelocities, xVelocities)

[vx, vy] = meshgrid(xVelocities, yVelocities);
vy = flipud(vy);
mtDirections = atan3(vy, vx);
mtSpeeds = sqrt(vx.^2 + vy.^2);
mtVelocities = [mtDirections(:), mtSpeeds(:)];

populationResponse = zeros(size(mtVelocities,1), 1);

i = 0;
while i < size(mtVelocities, 1)
    j = min(i+255, size(mtVelocities, 1));
    tmp = mtVelocities(i+1:j, :);

    [pop, ind, res] = shModel(stimulus, pars, 'mtpattern', tmp);
    
    for k = 1:size(res, 2)
        try
        tmp = shGetSubPop(res, ind, k);
        populationResponse(i+k, 1) = mean2(tmp);
        catch
            keyboard
        end
    end
    
    populationResponse(i+1:j, 1) = mean(shGetNeuron(res, ind), 2); 
    i = j;
end

populationResponse = reshape(populationResponse, size(vx));
    
